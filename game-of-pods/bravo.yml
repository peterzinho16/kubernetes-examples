apiVersion: v1
kind: PersistentVolume
metadata:
  name: drupal-mysql-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /drupal-mysql-data
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: drupal-mysql-pvc
spec:
  resources:
    requests:
      storage: 5Gi
  accessModes:
    - ReadWriteOnce
---
#k create secret generic drupal-mysql-secret --from-literal MYSQL_ROOT_PASSWORD=root_password --from-literal MYSQL_DATABASE=drupal-database --from-literal MYSQL_USER=mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: drupal-mysql
    type: deployment
  name: drupal-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      run: drupal-mysql
  strategy: {}
  template:
    metadata:
      labels:
        run: drupal-mysql
    spec:
      volumes:
        - name: mysql-vol
          persistentVolumeClaim:
            claimName: drupal-mysql-pvc
      containers:
        - image: mysql:5.7
          name: drupal-mysql
          volumeMounts:
            - name: mysql-vol
              mountPath: /var/lib/mysql
              readOnly: false
              subPath: dbdata
          env:
            - valueFrom:
                secretKeyRef:
                  key: MYSQL_ROOT_PASSWORD
                  name: drupal-mysql-secret
              name: MYSQL_ROOT_PASSWORD
            - valueFrom:
                secretKeyRef:
                  key: MYSQL_DATABASE
                  name: drupal-mysql-secret
              name: MYSQL_DATABASE
            - valueFrom:
                secretKeyRef:
                  key: MYSQL_USER
                  name: drupal-mysql-secret
              name: MYSQL_USER
          resources: {}
status: {}
#k expose deploy drupal-mysql --type ClusterIP --port 3306 --name drupal-mysql-service
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: drupal-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /drupal-data
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: drupal-pvc
spec:
  resources:
    requests:
      storage: 5Gi
  accessModes:
    - ReadWriteOnce
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: drupal
  name: drupal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drupal
  strategy: {}
  template:
    metadata:
      labels:
        app: drupal
    spec:
      volumes:
        - name: drupal-vol
          persistentVolumeClaim:
            claimName: drupal-pvc
      initContainers:
        - name: init-sites-volume
          image: drupal:8.6
          command:
            - /bin/bash
            - '-c'
          args:
            - 'cp -r /var/www/html/sites/ /data/; chown www-data:www-data /data/ -R'
          volumeMounts:
            - mountPath: /data
              name: drupal-vol
              readOnly: false
      containers:
        - image: drupal:8.6
          name: drupal
          volumeMounts:
            - mountPath: /var/www/html/modules
              name: drupal-vol
              subPath: modules
            - mountPath: /var/www/html/profiles
              name: drupal-vol
              subPath: profiles
            - mountPath: /var/www/html/sites
              name: drupal-vol
              subPath: sites
            - mountPath: /var/www/html/themes
              name: drupal-vol
              subPath: themes
          resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: drupal
  name: drupal-service
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
      nodePort: 30095
  selector:
    app: drupal
  type: NodePort
status:
  loadBalancer: {}